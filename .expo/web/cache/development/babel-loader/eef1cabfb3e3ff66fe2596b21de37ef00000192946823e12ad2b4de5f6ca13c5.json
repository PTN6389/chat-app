{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useEffect } from 'react';\nimport Start from \"./components/Start\";\nimport Chat from \"./components/Chat\";\nimport { useNetInfo } from '@react-native-community/netinfo';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { getStorage } from 'firebase/storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nvar Stack = createNativeStackNavigator();\nimport { initializeApp } from 'firebase/app';\nimport { disableNetwork, enableNetwork, getFirestore } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var connectionStatus = useNetInfo();\n  useEffect(function () {\n    if (connectionStatus.isConnected === false) {\n      Alert.alert(\"Connection lost!\");\n      disableNetwork(db);\n    } else if (connectionStatus.isConnected === true) {\n      enableNetwork(db);\n    }\n  }, [connectionStatus.isConnected]);\n  var firebaseConfig = {\n    apiKey: \"AIzaSyBPtl-fnDh1dddVgiNXymoTjq09HEYPonY\",\n    authDomain: \"chat-app-c181a.firebaseapp.com\",\n    projectId: \"chat-app-c181a\",\n    storageBucket: \"chat-app-c181a.appspot.com\",\n    messagingSenderId: \"127041336851\",\n    appId: \"1:127041336851:web:e307e224a29d82ccd7b1e6\"\n  };\n  var app = initializeApp(firebaseConfig);\n  var db = getFirestore(app);\n  var storage = getStorage(app);\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Start\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Start\",\n        component: Start\n      }), _jsx(Stack.Screen, {\n        name: \"Chat\",\n        children: function children(props) {\n          return _jsx(Chat, _objectSpread({\n            isConnected: connectionStatus.isConnected,\n            db: db,\n            storage: storage\n          }, props));\n        }\n      })]\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["useEffect","Start","Chat","useNetInfo","Alert","getStorage","NavigationContainer","createNativeStackNavigator","Stack","initializeApp","disableNetwork","enableNetwork","getFirestore","jsx","_jsx","jsxs","_jsxs","App","connectionStatus","isConnected","alert","db","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","storage","children","Navigator","initialRouteName","Screen","name","component","props","_objectSpread"],"sources":["C:/Users/Christina/Documents/Career/CareerFoundry/chat-app/App.js"],"sourcesContent":["import { useEffect } from 'react';\nimport Start from './components/Start';\nimport Chat from './components/Chat';\nimport { useNetInfo } from '@react-native-community/netinfo';\nimport { Alert } from 'react-native';\nimport { getStorage } from 'firebase/storage';\n\n//Import Navigation\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// Create the navigator\nconst Stack = createNativeStackNavigator();\n\n//Initialize Firebase and Firestore\nimport { initializeApp } from 'firebase/app';\nimport { disableNetwork, enableNetwork, getFirestore } from 'firebase/firestore';\n\nconst App = () => {\n  //Define new state that represents network connectivity status\n  const connectionStatus = useNetInfo();\n\n  useEffect(() => {\n    if (connectionStatus.isConnected === false) {\n      Alert.alert(\"Connection lost!\");\n      disableNetwork(db);\n    } else if (connectionStatus.isConnected === true) {\n      enableNetwork(db);\n    }\n  }, [connectionStatus.isConnected]);\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBPtl-fnDh1dddVgiNXymoTjq09HEYPonY\",\n    authDomain: \"chat-app-c181a.firebaseapp.com\",\n    projectId: \"chat-app-c181a\",\n    storageBucket: \"chat-app-c181a.appspot.com\",\n    messagingSenderId: \"127041336851\",\n    appId: \"1:127041336851:web:e307e224a29d82ccd7b1e6\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n\n  // Initialize Cloud Firestore and get a reference to the service\n  const db = getFirestore(app);\n  const storage = getStorage(app);\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator \n        initialRouteName=\"Start\">\n        <Stack.Screen \n          name=\"Start\"\n          component={Start}\n        />\n        <Stack.Screen \n          name=\"Chat\">\n          {props => <Chat isConnected={connectionStatus.isConnected} db={db} storage={storage} {...props} />}\n        </Stack.Screen>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,KAAK;AACZ,OAAOC,IAAI;AACX,SAASC,UAAU,QAAQ,iCAAiC;AAAC,OAAAC,KAAA;AAE7D,SAASC,UAAU,QAAQ,kBAAkB;AAG7C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAG3E,IAAMC,KAAK,GAAGD,0BAA0B,CAAC,CAAC;AAG1C,SAASE,aAAa,QAAQ,cAAc;AAC5C,SAASC,cAAc,EAAEC,aAAa,EAAEC,YAAY,QAAQ,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjF,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAEhB,IAAMC,gBAAgB,GAAGf,UAAU,CAAC,CAAC;EAErCH,SAAS,CAAC,YAAM;IACd,IAAIkB,gBAAgB,CAACC,WAAW,KAAK,KAAK,EAAE;MAC1Cf,KAAK,CAACgB,KAAK,CAAC,kBAAkB,CAAC;MAC/BV,cAAc,CAACW,EAAE,CAAC;IACpB,CAAC,MAAM,IAAIH,gBAAgB,CAACC,WAAW,KAAK,IAAI,EAAE;MAChDR,aAAa,CAACU,EAAE,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,gBAAgB,CAACC,WAAW,CAAC,CAAC;EAGlC,IAAMG,cAAc,GAAG;IACrBC,MAAM,EAAE,yCAAyC;IACjDC,UAAU,EAAE,gCAAgC;IAC5CC,SAAS,EAAE,gBAAgB;IAC3BC,aAAa,EAAE,4BAA4B;IAC3CC,iBAAiB,EAAE,cAAc;IACjCC,KAAK,EAAE;EACT,CAAC;EAGD,IAAMC,GAAG,GAAGpB,aAAa,CAACa,cAAc,CAAC;EAGzC,IAAMD,EAAE,GAAGT,YAAY,CAACiB,GAAG,CAAC;EAC5B,IAAMC,OAAO,GAAGzB,UAAU,CAACwB,GAAG,CAAC;EAE/B,OACEf,IAAA,CAACR,mBAAmB;IAAAyB,QAAA,EAClBf,KAAA,CAACR,KAAK,CAACwB,SAAS;MACdC,gBAAgB,EAAC,OAAO;MAAAF,QAAA,GACxBjB,IAAA,CAACN,KAAK,CAAC0B,MAAM;QACXC,IAAI,EAAC,OAAO;QACZC,SAAS,EAAEnC;MAAM,CAClB,CAAC,EACFa,IAAA,CAACN,KAAK,CAAC0B,MAAM;QACXC,IAAI,EAAC,MAAM;QAAAJ,QAAA,EACV,SAAAA,SAAAM,KAAK;UAAA,OAAIvB,IAAA,CAACZ,IAAI,EAAAoC,aAAA;YAACnB,WAAW,EAAED,gBAAgB,CAACC,WAAY;YAACE,EAAE,EAAEA,EAAG;YAACS,OAAO,EAAEA;UAAQ,GAAKO,KAAK,CAAG,CAAC;QAAA;MAAA,CACtF,CAAC;IAAA,CACA;EAAC,CACC,CAAC;AAE1B,CAAC;AAED,eAAepB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}